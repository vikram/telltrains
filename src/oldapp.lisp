(in-package :com.sondesh.database)

(ucw:defcomponent wrapper (ucw:simple-window-component)
  ((user :initarg :user :accessor user :initform nil)
   (closet :component (ucw:switching-container
                       :current-component-key 'return-ticket
                       :contents
		       `((return-ticket . ,(make-instance 'return-search))
			 (single-ticket . ,(make-instance 'single-search))))
           :accessor closet))
  (:default-initargs :title "telltrains: rail fares made simple"
    :stylesheet `(("sheet.css")
		  ("autosuggest.css"))
    :content-type "text/html; charset=utf-8;"
    :javascript `((:src "sheet.js")
		  (:src "autosuggest.js")
		  (:src "tutorial.js")))
  (:render ()
	   (with-slots (closet user) wrapper
	       (<:body 
		(<:img :src "logo.png")
		(<:div :id "navsite"
		       (<:ul
			(flet ((drawer-link (name text)
				 (if (eql (ucw:container.current-component-key closet) name)
				     (<:as-html text)
				     (<ucw:a :action (ucw:switch-component (closet wrapper) name)
					     (<:as-html text)))))
			  (<:li (drawer-link 'return-ticket "Return ticket"))
			  (<:li (drawer-link 'single-ticket "Single ticket")))))
		(<:div :id "bottom"
		       (dolist (comp (ucw:container.contents closet))
			 (setf (user (cdr comp)) user))
		       (ucw:render closet))
		(<:script :type "text/javascript"
			  (<:as-is
			   "var options = { script:\"suggest-stations.ucw?\",
		                        varname:\"input\",
                                        json:true
		                   };
		                  var as_xml2 = new AutoSuggest('tostation', options);
		                  var as_xml = new AutoSuggest('fromstation', options);"))
		))))

(ucw:defcomponent single-search (ucw:widget-component)
  ((user :initarg :user :accessor user))
  (:default-initargs :title "Trackz: Find the cheapest train fare for your day trip" :stylesheet "sheet.css")
  (:render ()
	   (with-slots (user) single-search
	     )))

(ucw:defcomponent return-search (ucw:widget-component)
  ((user :initarg :user :accessor user))
  (:default-initargs :title "Trackz: Find the cheapest train fare for your day trip" :stylesheet "sheet.css")
  (:render ()
	   (with-slots (user) return-search
	   (<:div
	    (let ((from "") (to "") (leaving "") (returning "") (travelers 1) (leaving-time "") (returning-time ""))
	      (<ucw:form :method "POST"
			 :action (find-return-fares return-search from to leaving returning travelers leaving-time returning-time)
			 (<:table
			  (<:tr (<:td (<:label :for "from" "From (city or station)"))
				(<:td (<:label :for "to" "To (city or station)")))
			  (<:tr (<:td (<ucw:text :name "from" :id "fromstation" :style "width: 200px" :accessor from))
				(<:td (<ucw:text :name "to" :id "tostation" :style "width: 200px" :accessor to)))
			  (<:tr (<:td (<:label :for "leaving" "Leaving"))
				(<:td (<:label :for "returning" "Returning")))
			  (<:tr (<:td (<ucw:text :name "leaving" :id "leaving" :accessor leaving :onclick "displayDatePicker('leaving')")
				      (<:input :type "button" :value "pick" :onclick "displayDatePicker('leaving')"))
				(<:td (<ucw:text :name "returning" :id "pick" :accessor returning :onclick "displayDatePicker('returning')")
				      (<:input :type "button" :value "pick" :onclick "displayDatePicker('returning')")))
			  (<:tr (<:td (<ucw:select :name "leaving-time" :accessor leaving-time
						   (<ucw:option :value "anytime" "anytime")
						   (<ucw:option :value "first train" "first train")
						   (<ucw:option :value "next train" "next train")
						   (<ucw:option :value "--" "---------------")
						   (<ucw:option :value "00-06" "Before 6am") ;;in the next x hours
						   (<ucw:option :value "06-09" "After 6am - 9am (peak)") ;;reach by 9
						   (<ucw:option :value "09-12" "After 9am - noon")
						   (<ucw:option :value "12-16" "After noon - 4pm")
						   (<ucw:option :value "16-19" "After 4pm - 7pm (peak)")
						   (<ucw:option :value "19-24" "After 7pm")))
				(<:td (<ucw:select :name "returning-time" :accessor returning-time
						   (<ucw:option :value "anytime" "anytime")
						   (<ucw:option :value "last train" "last train")
						   (<ucw:option :value "--" "---------------")
						   (<ucw:option :value "00-06" "Before 6am")
						   (<ucw:option :value "06-09" "After 6am - 9am (peak)")
						   (<ucw:option :value "09-12" "After 9am - noon")
						   (<ucw:option :value "12-16" "After noon - 4pm")
						   (<ucw:option :value "16-19" "After 4pm - 7pm (peak)")
						   (<ucw:option :value "19-24" "After 7pm")))))
			 (<:p (<:submit :value "Search"))))))))

(ucw:defcomponent suggest-stations (ucw:standard-component)
  ((input :initarg :input :accessor input :initform ""))
  (:default-initargs :content-type "text/xml;")
  (:render ()
	   (with-slots (input) suggest-stations
	     (let ((first t))
	       (<:as-is "{ results: [")
	       (dolist (result (find-station-code input))
		 (progn
		   (if first
		       (setf first nil)
		       (<:as-is ","))
		   (<:as-is (format nil "{ id: \"~A\", value: \"~A\", info: \"~A\"}" (station-code result) (station-name result) (station-length result)))))
	     (<:as-is "] }")))))
			 
(ucw:defaction find-return-fares ((return-search return-search) from to leaving returning travelers leaving-time returning-time)
  (ucw:call 'fare-results :from from :to to :day "1" :month "April"))

(ucw:defcomponent tutorail (ucw:simple-window-component)
  ()
  (:default-initargs :title "TellFares: London to Newport")
  (:render ()
	   ))

(ucw:defcomponent fare-results (ucw:widget-component)
  ((user :initarg :user :accessor user)
   (from :initarg :from :accessor from :initform "")
   (to :initarg :to :accessor to :initform "")
   (day :initarg :day :accessor day :initform "")
   (month :initarg :month :accessor month :initform ""))
  (:default-initargs :content-type "text/html;")
  (:render ()
	   (with-slots (from to day month) fare-results
	     (<:body :onload (format nil "onLoadTL('~A','~A');" from to)
		     (<:h1 (<:as-is (format nil "~A to ~A" from to)))
		     (<:img :id "progress" :src "progress.gif" :class "notWaiting")
		     ;;(<:div :id "my-timeline" :style "height: 400px; border: 1px solid #aaa")
		     (<:div :id "outerDiv"
			    (<:div :id "innerDiv"
				   (<:div :id "timeline" :style "top 0px; height: 600px; left: -3500px; width: 7455px;"
					  (<:div :style "position: relative; font-size: 80%; display: block; z-index: 1;"
						 (<:div :style "position: absolute; left: 0px; top: 0px; width: 30px;" :class "odd") 
						 (<:div :style "position: absolute; left: 31px; top: 0px; width: 30px;" :class "even") 
						 (<:div :style "position: absolute; left: 62px; top: 0px; width: 30px;" :class "odd") 
						 (<:div :style "position: absolute; left: 93px; top: 0px; width: 30px;" :class "odd") 
						 (<:div :style "position: absolute; left: 124px; top: 0px; width: 30px;" :class "odd") 
						 (<:div :style "position: absolute; left: 155px; top: 0px; width: 30px;" :class "even") 
						 (<:div :style "position: absolute; left: 186px; top: 0px; width: 30px;" :class "odd") 
						 (<:div :style "position: absolute; left: 217px; top: 0px; width: 30px;" :class "even") 
						 (<:div :style "position: absolute; left: 248px; top: 0px; width: 30px;" :class "odd") 
						 (<:div :style "position: absolute; left: 279px; top: 0px; width: 30px;" :class "even") 
						 (<:div :style "position: absolute; left: 310px; top: 0px; width: 30px;" :class "odd") 
						 (<:div :style "position: absolute; left: 341px; top: 0px; width: 30px;" :class "even") 
						 (<:div :style "position: absolute; left: 372px; top: 0px; width: 30px;" :class "odd") 
						 (<:div :style "position: absolute; left: 403px; top: 0px; width: 30px;" :class "even") 
						 (<:div :style "position: absolute; left: 434px; top: 0px; width: 30px;" :class "odd") 
						 (<:div :style "position: absolute; left: 465px; top: 0px; width: 30px;" :class "even") 
						 (<:div :style "position: absolute; left: 496px; top: 0px; width: 30px;" :class "odd") 
						 (<:div :style "position: absolute; left: 527px; top: 0px; width: 30px;" :class "even") 
						 (<:div :style "position: absolute; left: 558px; top: 0px; width: 30px;" :class "odd") 
						 (<:div :style "position: absolute; left: 589px; top: 0px; width: 30px;" :class "even") 
						 (<:div :style "position: absolute; left: 620px; top: 0px; width: 30px;" :class "odd") 
						 (<:div :style "position: absolute; left: 651px; top: 0px; width: 30px;" :class "even") 
						 (<:div :style "position: absolute; left: 682px; top: 0px; width: 30px;" :class "odd") 
						 (<:div :style "position: absolute; left: 713px; top: 0px; width: 30px;" :class "even") 
						 (<:div :style "position: absolute; left: 744px; top: 0px; width: 30px;" :class "odd") 
						 (<:div :style "position: absolute; left: 775px; top: 0px; width: 30px;" :class "even") 
						 (<:div :style "position: absolute; left: 806px; top: 0px; width: 30px;" :class "odd") 
						 (<:div :style "position: absolute; left: 837px; top: 0px; width: 30px;" :class "even") 
						 (<:div :style "position: absolute; left: 868px; top: 0px; width: 30px;" :class "odd") 
						 (<:div :style "position: absolute; left: 899px; top: 0px; width: 30px;" :class "even") 
						 (<:div :style "position: absolute; left: 930px; top: 0px; width: 30px;" :class "odd") 
						 (<:div :style "position: absolute; left: 961px; top: 0px; width: 30px;" :class "even") 
						 (<:div :style "position: absolute; left: 992px; top: 0px; width: 30px;" :class "odd")
						 (<:div :style "position: absolute; left: 1023px; top: 0px; width: 30px;" :class "even") 
						 (<:div :style "position: absolute; left: 1054px; top: 0px; width: 30px;" :class "odd") 
						 (<:div :style "position: absolute; left: 1085px; top: 0px; width: 30px;" :class "even") 
						 (<:div :style "position: absolute; left: 1116px; top: 0px; width: 30px;" :class "odd") 
						 (<:div :style "position: absolute; left: 1147px; top: 0px; width: 30px;" :class "even"))
					  (<:div :style "position: relative; display: block; z-index: 105;"
						 (<:div :style "position: absolute; left: 0px; top: 12px; width: 30px; height: 600px" :class "odd")
						 (<:div :style "position: absolute; left: 31px; top: 12px; width: 30px; height: 600px" :class "even") 
						 (<:div :style "position: absolute; left: 62px; top: 12px; width: 30px; height: 600px" :class "odd") 
						 (<:div :style "position: absolute; left: 93px; top: 12px; width: 30px; height: 600px" :class "even")
						 (<:div :style "position: absolute; left: 124px; top: 12px; width: 30px; height: 600px" :class "odd") 
						 (<:div :style "position: absolute; left: 155px; top: 12px; width: 30px; height: 600px" :class "even") 
						 (<:div :style "position: absolute; left: 186px; top: 12px; width: 30px; height: 600px" :class "odd") 
						 (<:div :style "position: absolute; left: 217px; top: 12px; width: 30px; height: 600px" :class "even")
						 (<:div :style "position: absolute; left: 248px; top: 12px; width: 30px; height: 600px" :class "odd") 
						 (<:div :style "position: absolute; left: 279px; top: 12px; width: 30px; height: 600px" :class "even") 
						 (<:div :style "position: absolute; left: 310px; top: 12px; width: 30px; height: 600px" :class "odd") 
						 (<:div :style "position: absolute; left: 341px; top: 12px; width: 30px; height: 600px" :class "even")
						 (<:div :style "position: absolute; left: 372px; top: 12px; width: 30px; height: 600px" :class "odd") 
						 (<:div :style "position: absolute; left: 403px; top: 12px; width: 30px; height: 600px" :class "even") 
						 (<:div :style "position: absolute; left: 434px; top: 12px; width: 30px; height: 600px" :class "odd") 
						 (<:div :style "position: absolute; left: 465px; top: 12px; width: 30px; height: 600px" :class "even")
						 (<:div :style "position: absolute; left: 496px; top: 12px; width: 30px; height: 600px" :class "odd") 
						 (<:div :style "position: absolute; left: 527px; top: 12px; width: 30px; height: 600px" :class "even") 
						 (<:div :style "position: absolute; left: 558px; top: 12px; width: 30px; height: 600px" :class "odd") 
						 (<:div :style "position: absolute; left: 589px; top: 12px; width: 30px; height: 600px" :class "even")
						 (<:div :style "position: absolute; left: 620px; top: 12px; width: 30px; height: 600px" :class "odd") 
						 (<:div :style "position: absolute; left: 651px; top: 12px; width: 30px; height: 600px" :class "even") 
						 (<:div :style "position: absolute; left: 682px; top: 12px; width: 30px; height: 600px" :class "odd") 
						 (<:div :style "position: absolute; left: 713px; top: 12px; width: 30px; height: 600px" :class "even")
						 (<:div :style "position: absolute; left: 744px; top: 12px; width: 30px; height: 600px" :class "odd") 
						 (<:div :style "position: absolute; left: 775px; top: 12px; width: 30px; height: 600px" :class "even") 
						 (<:div :style "position: absolute; left: 806px; top: 12px; width: 30px; height: 600px" :class "odd") 
						 (<:div :style "position: absolute; left: 837px; top: 12px; width: 30px; height: 600px" :class "even")
						 (<:div :style "position: absolute; left: 868px; top: 12px; width: 30px; height: 600px" :class "odd") 
						 (<:div :style "position: absolute; left: 899px; top: 12px; width: 30px; height: 600px" :class "even") 
						 (<:div :style "position: absolute; left: 930px; top: 12px; width: 30px; height: 600px" :class "odd") 
						 (<:div :style "position: absolute; left: 961px; top: 12px; width: 30px; height: 600px" :class "even")
						 (<:div :style "position: absolute; left: 992px; top: 12px; width: 30px; height: 600px" :class "odd") 
						 (<:div :style "position: absolute; left: 1023px; top: 12px; width: 30px; height: 600px" :class "even") 
						 (<:div :style "position: absolute; left: 1054px; top: 12px; width: 30px; height: 600px" :class "odd") 
						 (<:div :style "position: absolute; left: 1085px; top: 12px; width: 30px; height: 600px" :class "even")
						 (<:div :style "position: absolute; left: 1116px; top: 12px; width: 30px; height: 600px" :class "odd") 
						 (<:div :style "position: absolute; left: 1147px; top: 12px; width: 30px; height: 600px" :class "even"))
					  (<:div :id "trains" :style "position: relative; display: block; font-size: 80%; z-index: 110;"))))
		     (<:div :id "sandbox")))))

(ucw:defcomponent single-times-fares-hour-query (ucw:standard-component)
  ((from :initarg :from :accessor from :initform "")
   (to :initarg :to :accessor to :initform "")
   (day :initarg :day :accessor day :initform "")
   (month :initarg :month :accessor month :initform "")
   (hour :initarg :hour :accessor hour :initform ""))
  (:default-initargs :content-type "text/xml;")
  (:render ()
	   (with-slots (from to day month hour) single-times-fares-hour-query
	     (let ((first t))
	       (<:as-is "{ results: [")
	       (dolist (result (get-fares from to day month (map0-n #'(lambda (n) (format nil "~A" (+ n (parse-integer hour)))) 2)))
		 (if first
		     (setf first nil)
		     (<:as-is ","))
		 (<:as-is "{ train: ")
		 (let* ((train (car result))
			(changes (getChanges (eighth train) (parse-integer (sixth train)))))
		   (<:as-is (format nil "{ from: \"~A\", to: \"~A\", leaving: \"~A\", arriving: \"~A\", duration: \"~A\", changes: \"~A\", startem: \"~A\", durem: \"~A\", leavingnum: \"~A\", breaks: [" (find-station (first train)) (find-station (second train)) (third train) (fourth train) (fifth train) (sixth train) (round (timedifference (third train) "05:00")) (round (timedifference (fifth train) "00:00")) (timenum (third train))))
		   (let ((first-change t))
		     (dolist (change changes)
		       (if first-change
			   (setf first-change nil)
			   (<:as-is ","))
		       (<:as-is (format nil "{ start: \"~A\", leaving: \"~A\", type: \"~A\"}" (first change) (second change) (third change))))))
		 (<:as-is "]}, fares: [")
		 (let ((first-fare t))
		   (dolist (fare (cdr result))
		     (if first-fare
			 (setf first-fare nil)
			 (<:as-is ","))
		     (<:as-is (format nil "{ type: \"~A\", price: ~S}" (first fare) (second fare)))))
		 (<:as-is "] }"))
	       (<:as-is "] }")))))

(defmacro list->json (list results)
  (with-gensyms (first-one var)
    `(let ((,first-one t))
       (dolist (,var ,results)
	 (if ,first-one
	     (setf ,first-one nil)
	     (<:as-is ","))
	 (<:as-is (format nil "{ ~A: \"~A\", ~A: ~S}" (first var) (second var)))))))

